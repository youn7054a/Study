@using SHOP.Model
@using ZNewShopping.Admin.Service <!--미사용API로 변경-->

@using System.IO;
@using Tewr.Blazor.FileReader

@inject ProductBLL pro
@inject IJSRuntime JSRuntime
@inject IFileReaderService fileReader
@inject HttpClient client

<div class="modal fade @showtag" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: @styletag;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="closeModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="@product">
                @*<ValidationSummary />*@
                <div class="modal-body">

                    <div class="form-group">
                        <label class="col-form-label">코드:</label>
                        <input @bind-value="@product.Code" type="text" class="form-control" disabled="@isDisabled">
                        <label class="col-form-label">공통코드1 :</label>
                        <select @onchange="setSelectBox" class="form-control" id="exampleFormControlSelect1">
                            @foreach (var item in com1)
                            {
                                <option value="@item.Com1Code1">@item.Com1Name</option>
                            }
                        </select>
                        <label class="col-form-label">공통코드2 :</label>
                        <select @bind="@product.Com2Code2" class="form-control" id="exampleFormControlSelect2">
                            @foreach (var item in com2)
                            {
                                <option value="@item.Com2Code2">@item.Com2Name</option>
                            }
                        </select>
                        <label class="col-form-label">제품이름:</label>
                        <input @bind-value="@product.Name" type="text" class="form-control">
                        <label class="col-form-label">가격:</label>
                        <input @bind-value="@product.Price" type="text" class="form-control">
                        <label class="col-form-label">설명:</label>
                        <input @bind-value="@product.Description" type="text" class="form-control">
                    </div>

                </div>
                <div class="form-group">
                    <div class="row">
                        <div>
                            <div class="form-group">
                                <input type="file" @ref="inputReference" @onchange="async () => await OpenFileAsync()" />
                                @if (@isFileInfoShow)
                                {
                                    <ul>
                                        <li>File Name: @fileName</li>
                                        <li>Size: @size</li>
                                        <li>Type: @type</li>
                                    </ul>
                                }
                            </div>
                            <button class="btn btn-block btn-success" @onclick="async () => await UploadFileAsync()">Upload File</button>


                            @if (!string.IsNullOrWhiteSpace(message) && @isFileInfoShow)
                            {
                                <div class="alert alert-success">
                                    File has been uploaded
                                </div>
                            }
                        </div>
                        <div>
                            @if (imagePath != null && @isFileInfoShow)
                            {
                                <img style="width:150px" src="@imagePath" />
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="closeModal">Close</button>
                    <button type="submit" class="btn btn-primary" @onclick="button_onclick">Save changes</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public string isCreate { get; set; }

    Product product = new Product();
    List<CommonCode1> com1 = new List<CommonCode1>();
    List<CommonCode2> com2 = new List<CommonCode2>();


    string com1code = "";
    string com2code = "";

    string showtag = "";
    string styletag = "none";
    string isDisabled = "true";

    bool isFileInfoShow = false;

    IFileListEntry file;

    [Parameter] public EventCallback<string> OnClick { get; set; }


    ElementReference inputReference;
    string message = string.Empty;
    string imagePath = null;

    string fileName = string.Empty;
    string fileExtension = string.Empty;
    string type = string.Empty;
    string size = string.Empty;

    Stream fileStream = null;


    private async Task button_onclick()
    {
        if(isCreate == "C")
            pro.CreateProduct(product);
        else
        {
            pro.UpdateProduct(product);
        }

        await OnClick.InvokeAsync("");

        if (fileStream != null)
            await UploadFileAsync();

        product = new Product();
        closeModal();
    }

    public void showModal(int code)
    {

        //초기화 값지정
        com1 = pro.GetCom1List();
        com2 = pro.GetCom2List(com1.FirstOrDefault().Com1Code1);
        product.Com1Code1 = com1.First().Com1Code1;
        product.Com2Code2 = com2.First().Com2Code2;

        if(code != 0)
            product = pro.GetProductList().FirstOrDefault(c =>c.Code == code);

        showtag = "show";
        styletag = "block";
        StateHasChanged();
    }

    public void closeModal()
    {
        showtag = "";
        styletag = "none";
        StateHasChanged();
    }

    public void setSelectBox(ChangeEventArgs e)
    {

        product.Com1Code1 = e.Value.ToString();
        com2 = pro.GetCom2List(e.Value.ToString());
    }

    protected override void OnInitialized()
    {
        com1 = pro.GetCom1List();
        com2 = pro.GetCom2List(com1.FirstOrDefault().Com1Code1);
        product.Com1Code1 = com1.First().Com1Code1;
        product.Com2Code2 = com2.First().Com2Code2;

        if (isCreate == "C")
            isDisabled = "false";
    }

    async Task OpenFileAsync()
    {
        // Read the files
        var file = (await fileReader.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        isFileInfoShow = true;

        // Get the info of that files
        var fileInfo = await file.ReadFileInfoAsync();
        fileName = fileInfo.Name;
        size = $"{fileInfo.Size}b";
        type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int)fileInfo.Size))
        {
            fileStream = new MemoryStream(ms.ToArray());
        }
    }

    async Task UploadFileAsync()
    {

        // Create the content
        var file = new MultipartFormDataContent();
        file.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");


        string extension = Path.GetExtension(fileName);
        fileName = product.Code + extension;

        file.Add(new StreamContent(fileStream, (int)fileStream.Length), "image", fileName);//파라미터지정

        string url = "http://3.34.209.209:8000";
        //string url = "https://localhost:44309";

        var response = await client.PostAsync($"{url}/api/upload", file);

        if (response.IsSuccessStatusCode)
        {
            var uploadedFileName = await response.Content.ReadAsStringAsync();
            imagePath = $"{url}/imageFiles/{uploadedFileName}";
            message = "File has been uploaded successfully!";
            file = null;
            isFileInfoShow = false;
        }
        else
        {
            message = "File has been filed";
        }
    }

}

